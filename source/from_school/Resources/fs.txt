#version 430
uniform sampler2D texSamp;
layout(location=0) in vec2 uv;
layout(location=1) in vec3 vertPos;
layout(location=2) in vec3 normal;
out vec3 Color;

uniform int wireframe;
uniform vec3 lightPos;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specColor;
uniform float shininess;
uniform float screenGamma;

void main()
{
	vec3 theColor = ambientColor;
	vec3 L = normalize(lightPos - vertPos);
	vec3 V = normalize(-vertPos);
	vec3 N = normalize(normal);
	float specular = 0.0;

	if (dot(N, L) > 0)
	{
		vec3 H = normalize(L + V);
		float specAngle = max(dot(N, H), 0.0);
		specular = pow(specAngle, shininess);
		
		theColor = theColor + clamp(dot(N, L), 0, 1) * diffuseColor;
	}

	vec3 colorGammaCorrected = pow(theColor, vec3(1.0/screenGamma));
	Color = texture(texSamp, uv).rgb;// * theColor;// + specular * specColor; Specular Ã¤r trasig
	if (wireframe == 1)
	{
//	    Color = vec3(1,0,0);
	}
}